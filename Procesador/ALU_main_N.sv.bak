//module ALU_main_N #(
//    parameter N = 4 // Parámetro para el número de bits
//) (
//    input logic [N-1:0] A_num,           // Primer operando
//    input logic [N-1:0] B_num,           // Segundo operando
//    input logic [1:0] ALUControl,        // Selector
//    output logic [N-1:0] result,         // Resultado final elegido
//    output logic V_flag, C_flag, N_flag, Z_flag
//);
//
//    // Variables internas
//    logic [N-1:0] B_neg;            // Complemento del segundo operando
//    logic [N-1:0] B_final;          // Segundo operando final resultante del mux 2:1
//    logic [N-1:0] result_and;       // Resultado de la operación AND
//    logic [N-1:0] result_or;        // Resultado de la operación OR
//    logic [N-1:0] result_sum;       // Resultado del sumador
//    logic cout;                     // Acarreo final
//
//    // Obteniendo el complemento de B_num
//    always @(*) begin
//        B_neg <= ~B_num;
//    end
//
//    // Instancia del módulo del MUX 2:1
//    mux_2to1_N #(N) mux_2 (
//        .d0(B_num),
//        .d1(B_neg),
//        .sel(ALUControl[0]),
//        .y(B_final)
//    );
//
//    // Instancia del módulo del Sumador
//    sumador_N #(N) sumador_nums(
//        .A_num(A_num), 
//        .B_num(B_final), 
//        .carry_in(ALUControl[0]), 
//        .carry_out(cout), 
//        .result(result_sum)
//    );
//
//    // Instancia del módulo OR
//    orGate_N #(N) or_nums (
//        .a(A_num),
//        .b(B_num),
//        .result(result_or)
//    );
//
//    // Instancia del módulo AND
//    AND_gate_N #(N) and_nums(
//        .A_num(A_num), 
//        .B_num(B_num), 
//        .result(result_and)
//    );
//
//    // Instancia del módulo del Mux 4:1
//    mux_4to1_N #(N) mux_4 (
//        .d0(result_sum),
//        .d1(result_sum),
//        .d2(result_and),
//        .d3(result_or),
//        .sel(ALUControl),
//        .y(result)
//    );
//
//    // Instancia del módulo que determina las banderas
//    ALU_flags_N #(N) flags(
//        .A_msb(A_num[N-1]),
//        .B_msb(B_num[N-1]),
//        .ALUControl(ALUControl),
//        .result(result),
//        .Sum_msb(result_sum[N-1]),
//        .result_MSB(result[N-1]),
//        .cout(cout),
//        .V_flag(V_flag),
//        .C_flag(C_flag),
//        .N_flag(N_flag),
//        .Z_flag(Z_flag)
//    );
//
//endmodule

module ALU_main_N (input logic [31:0] A,
           input logic [31:0] B,
           input logic [3:0] ALUControl,
           output logic [3:0] ALUFlags,
           output logic [31:0] Result);

    always_comb begin
        case (ALUControl)
            4'b0000: begin  // ADD
                Result = A + B;
                ALUFlags = {Result[31], Result == 0, Result < A, (A[31] == B[31]) && (Result[31] != A[31])};
					 
            end
            4'b0001: begin  // SUB
                Result = A - B;
                ALUFlags = {Result[31], Result == 0, A < B, (A[31] != B[31]) && (Result[31] != A[31])};
					 
            end
            4'b0010: begin  // AND
                Result = A & B;
                ALUFlags = {Result[31], Result == 0, ALUFlags[2], ALUFlags[3]};
					 
            end
            4'b0011: begin  // ORR
                Result = A | B;
                ALUFlags = {Result[31], Result == 0, ALUFlags[2], ALUFlags[3]};
					 
            end
            4'b0100: begin  // EOR
                Result = A ^ B;
                ALUFlags = {Result[31], Result == 0, ALUFlags[2], ALUFlags[3]};
					 
            end
            4'b0101: begin  // MOV
                Result = B;
                ALUFlags = {Result[31], Result == 0, ALUFlags[2], ALUFlags[3]};
					 
            end
            4'b0110: begin  // CMP
                Result = A - B;
                ALUFlags = {Result[31], Result == 0, A < B, (A[31] != B[31]) && (Result[31] != A[31])};
					 
            end
            4'b1000: begin  // LDR
                Result = A + B;
                ALUFlags = {Result[31], Result == 0, Result < A, (A[31] == B[31]) && (Result[31] != A[31])};
					
            end
            4'b1001: begin  // STR
                Result = A + B;
                ALUFlags = {ALUFlags[0], ALUFlags[1], ALUFlags[2], ALUFlags[3]};
					 
            end
            4'b1010: begin  // LDMm
                Result = A + B;
                ALUFlags = {Result[31], Result == 0, Result < A, (A[31] == B[31]) && (Result[31] != A[31])};
					 
            end
				4'b1011: begin  // BLx
                Result = 32'bx;
                ALUFlags = 4'b0000;
					 
					 
            end
            default: begin  // Opcode not implemented
                Result = 32'bx;
                ALUFlags = 4'b0000;
					 
            end
        endcase
    end

endmodule
